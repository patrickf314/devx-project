package de.devx.project.commons.client.typescript;


import de.devx.project.commons.client.typescript.data.TypeScriptDTOFieldModel;
import de.devx.project.commons.client.typescript.data.TypeScriptDTOModel;
import de.devx.project.commons.client.typescript.data.TypeScriptEnumModel;
import de.devx.project.commons.client.typescript.data.TypeScriptTypeModel;
import de.devx.project.commons.client.typescript.io.TypeScriptPackageAlias;
import de.devx.project.commons.test.io.TestSourceFileGenerator;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

class TypescriptClientGeneratorTest {

    private static final TypeScriptPackageAlias PACKAGE_ALIAS = new TypeScriptPackageAlias("de.test.typescript.client", null);

    private final TestSourceFileGenerator fileGenerator = new TestSourceFileGenerator();
    private final TypescriptClientGenerator generator = new TypescriptClientGenerator(fileGenerator, List.of(PACKAGE_ALIAS), null);

    @Test
    void testGenerateEnum() throws IOException {
        var model = new TypeScriptEnumModel();
        model.setName("TestType");
        model.setClassName("de.test.typescript.client.type.TestType");
        model.setValues(List.of("A", "B", "C"));

        generator.generateEnum(model);

        var generatedMatcher = fileGenerator.getFileContent("type", "TestType");
        assertThat(generatedMatcher.isPresent(), is(true));
        assertThat(generatedMatcher.get(), is("""
                /**
                 * Autogenerated enum type representing de.test.typescript.client.type.TestType
                 */
                export type TestType = 'A' | 'B' | 'C';
                                
                /**
                 * Autogenerated constant array containing all allowed enum values of TestType
                 */
                export const TestTypes: TestType[] = ['A', 'B', 'C'];
                                
                /**
                 * Autogenerated function for type checking
                 *
                 * @param {*} value the value to check
                 * @returns {boolean} true if value is of type TestType
                 */
                export function isTestType(value: unknown): value is TestType {
                    return typeof value === 'string' && TestTypes.includes(value as TestType);
                }
                                
                /**
                * Autogenerated function for casting
                *
                * @param {*} value the value to cast
                * @returns {TestType} the value
                */
                export function castToTestType(value: unknown): TestType {
                    if (isTestType(value)) {
                        return value;
                    }
                                
                    throw new Error('CastError: Failed to cast value to a TestType');
                }
                """));
    }

    @Test
    void testGenerateDTO() throws IOException {
        var model = new TypeScriptDTOModel();
        model.setName("TestDTO");
        model.setClassName("de.test.typescript.client.dto.TestDTO");
        model.setFields(List.of(
                new TypeScriptDTOFieldModel("requiredField", new TypeScriptTypeModel("number", false)),
                new TypeScriptDTOFieldModel("optionalField", new TypeScriptTypeModel("string", true))
        ));

        generator.generateDTO(model);

        var generatedMatcher = fileGenerator.getFileContent("dto", "TestDTO");
        assertThat(generatedMatcher.isPresent(), is(true));
        assertThat(generatedMatcher.get(), is("""
                /* eslint-disable @typescript-eslint/consistent-type-imports */
                /**
                 * Autogenerated DTO interface representing the java class de.test.typescript.client.dto.TestDTO
                 */
                export interface TestDTO {
                                
                    requiredField: number;
                    optionalField?: string;
                                
                }
                """));
    }

    @Test
    void testGenerateGenericDTO() throws IOException {
        var model = new TypeScriptDTOModel();
        model.setName("TestDTO");
        model.setClassName("de.test.typescript.client.dto.TestDTO");
        model.setTypeArguments(List.of("T"));
        model.setFields(List.of(
                new TypeScriptDTOFieldModel("field", new TypeScriptTypeModel("T", false))
        ));

        generator.generateDTO(model);

        var generatedMatcher = fileGenerator.getFileContent("dto", "TestDTO");
        assertThat(generatedMatcher.isPresent(), is(true));
        assertThat(generatedMatcher.get(), is("""
                /* eslint-disable @typescript-eslint/consistent-type-imports */
                /**
                 * Autogenerated DTO interface representing the java class de.test.typescript.client.dto.TestDTO
                 */
                export interface TestDTO<T> {
                                
                    field: T;
                                
                }
                """));
    }
}