<#-- @ftlvariable name="model" type="de.devx.project.assertj.assertion.gennerator.data.AssertJAssertionModel" -->
<#-- @ftlvariable name="imports" type="java.util.List<java.lang.String>" -->
package ${model.packageName};

<#list imports as import>
import ${import};
</#list>

/**
 * Autogenerated extension of the assertJ {@link Assertions}
 * allowing for typed asserts of objects
 */
public class ${model.name} extends Assertions {
<#list model.asserts as assert>

    /**
     * Factory method for an assert of a {@link ${assert.typeName}}.
     *
     * @param actual the actual object
     * @return the typed assert
     */
    public static<#if assert.typeArguments?has_content> <${assert.typeArguments?join(", ")}></#if> ${assert.name}Assert<#if assert.typeArguments?has_content><${assert.typeArguments?join(", ")}></#if> assertThat(${assert.typeName}<#if assert.typeArguments?has_content><${assert.typeArguments?join(", ")}></#if> actual) {
        return new ${assert.name}Assert<#if assert.typeArguments?has_content><></#if>(actual);
    }
</#list>
<#list model.assertThatMethods as assertThatMethod>

    /**
    * Transitive method for {@link ${assertThatMethod.name}#assertThat(${assertThatMethod.type.qualifiedTypeName})}.
    *
    * @param actual the actual object
    * @return the typed assert
    */
    public static<#if assert.typeArguments?has_content> <${assert.typeArguments?join(", ")}></#if> ${assertThatMethod.assertType.qualifiedTypeName} assertThat(${assertThatMethod.type.qualifiedTypeName} actual) {
        return ${assertThatMethod.name}.assertThat(actual);
    }
</#list>
}