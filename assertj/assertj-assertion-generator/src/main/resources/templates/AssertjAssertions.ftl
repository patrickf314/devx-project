<#-- @ftlvariable name="model" type="de.devx.project.assertj.assertion.gennerator.data.AssertJAssertionModel" -->
<#-- @ftlvariable name="imports" type="java.util.List<java.lang.String>" -->
package ${model.packageName};

<#list imports as import>
import ${import};
</#list>

/**
 * Autogenerated extension of the assertJ {@link Assertions}
 * allowing for typed asserts of objects
 */
public class ${model.name} extends Assertions {
<#list model.asserts?filter(assert -> !assert.typeArguments?has_content) as assert>

    /**
     *
     */
    public static final InstanceOfAssertFactory<${assert.name}, ${assert.assertName}> ${assert.factoryName} = new InstanceOfAssertFactory<>(${assert.name}.class, ${model.name}::assertThat);
</#list>
<#list model.asserts as assert>

    /**
     * Factory method for an assert of a {@link ${assert.name}}.
     *
     * @param actual the actual object
     * @return the typed assert
     */
    public static<#if assert.typeArguments?has_content> <${assert.typeArguments?map(typeArgument -> typeArgument.definition)?join(", ")}></#if> ${assert.assertName}<#if assert.typeArguments?has_content><${assert.typeArguments?map(typeArgument -> typeArgument.definition)?join(", ")}></#if> assertThat(${assert.name}<#if assert.typeArguments?has_content><${assert.typeArguments?map(typeArgument -> typeArgument.definition)?join(", ")}></#if> actual) {
        return new ${assert.assertName}<#if assert.typeArguments?has_content><></#if>(actual);
    }
</#list>
<#list model.assertThatMethods as assertThatMethod>

    /**
    * Transitive method for {@link ${assertThatMethod.assertionClass.name}#${assertThatMethod.name}(${assertThatMethod.type.qualifiedTypeName})}.
    *
    * @param actual the actual object
    * @return the typed assert
    */
    public static<#if assertThatMethod.typeArguments?has_content> <${assertThatMethod.typeArguments?map(typeArgument -> typeArgument.definition)?join(", ")}></#if> ${assertThatMethod.assertType.qualifiedTypeName} ${assertThatMethod.name}(${assertThatMethod.type.qualifiedTypeName} actual) {
        return ${assertThatMethod.assertionClass.name}.${assertThatMethod.name}(actual);
    }
</#list>
}