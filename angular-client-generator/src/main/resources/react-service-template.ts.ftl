<#-- @ftlvariable name="model" type="api.maven.plugin.angular.client.data.TypeScriptService" -->
<#macro setHeaderParam param>
<#-- @ftlvariable name="param" type="api.maven.plugin.angular.client.data.TypeScriptServiceMethodParameter" -->
    <#if param.type.name == "string" || param.type.name == "string[]" >
        headers['${param.parameterName}'] = arg.${param.name};
    <#elseif param.type.name == "number" || param.type.name == "boolean">
        headers['${param.parameterName}'] = String(arg.${param.name});
    <#elseif param.type.name == "number[]"  || param.type.name == "boolean[]" >
        headers['${param.parameterName}'] = arg.${param.name}.map(String);
    <#else>
        headers['${param.parameterName}'] = arg.${param.name}.toString();
    </#if>
</#macro>
<#macro setQueryParam param>
<#-- @ftlvariable name="param" type="api.maven.plugin.angular.client.data.TypeScriptServiceMethodParameter" -->
    <#if param.type.name == "string" || param.type.name == "number" || param.type.name == "boolean" || param.type.name == "string[]" || param.type.name == "number[]" || param.type.name == "boolean[]">
        params['${param.parameterName}'] = arg.${param.name};
    <#else>
        params['${param.parameterName}'] = arg.${param.name}.toString();
    </#if>
</#macro>
<#macro appendFormData param>
<#-- @ftlvariable name="param" type="api.maven.plugin.angular.client.data.TypeScriptServiceMethodParameter" -->
    <#if param.type.name == 'File'>
        formData.append('${param.parameterName}', arg.${param.name}, arg.${param.name}.name);
    <#elseif param.type.name == 'number'>
        formData.append('${param.parameterName}', String(arg.${param.name}));
    <#elseif param.type.name == 'string'>
        formData.append('${param.parameterName}', arg.${param.name});
    <#else>
        formData.append('${param.parameterName}', arg.${param.name}.toString());
    </#if>
</#macro>
<#macro url method>
<#-- @ftlvariable name="method" type="api.maven.plugin.angular.client.data.TypeScriptServiceMethod" -->
await baseUrl(${method.basePathParamNames?map(param -> 'arg.' + param)?join(', ')})<#if method.path.path??> + ${method.path.path}</#if></#macro>
<#list model.dependencies as dependency>
import {${dependency.identifiers?join(", ")}} from '${dependency.path}';
</#list>

async function baseUrl(${model.basePaths[0].params?map(baseUrlParam -> baseUrlParam + ": string | number")?join(", ")}): Promise<string> {
    return await Config.backendUrl()<#if model.basePaths[0].path?has_content> + ${model.basePaths[0].path}</#if>;
}
<#list model.methods as method>

export const ${method.name}Thunk = createAsyncThunk('${model.name}/${method.name}', async function(arg: {${method.parameters?map(param -> param.name + ": " + param.type.name + param.optional?then(" | undefined", ""))?join(", ")}}, thunkAPI): ${method.returnTypeWrapper}<${method.returnType.name}> {
    <#if method.headerParams?has_content>
    const headers: { [header: string]: string | string[] } = {};
    <#list method.headerParams as headerParam>
        <#if headerParam.optional>
    if(typeof arg.${headerParam.name} !== 'undefined') {
            <@setHeaderParam param=headerParam></@setHeaderParam>
    }
        <#else>
            <@setHeaderParam param=headerParam></@setHeaderParam>
        </#if>
    </#list>

    </#if>
    <#if method.formData>
    const formData = new FormData();
        <#list method.queryParams as queryParam>
            <#if queryParam.optional>
        if(typeof arg.${queryParam.name} !== 'undefined') {
                <@appendFormData param=queryParam></@appendFormData>
        }
            <#else>
                <@appendFormData param=queryParam></@appendFormData>
            </#if>
        </#list>

    <#elseif method.queryParams?has_content && method.httpMethod == "GET">
        const params: { [param: string]: string | number | boolean | (string | number | boolean)[] } = {};
        <#list method.queryParams as param>
            <#if param.optional>
        if (typeof arg.${param.name} !== 'undefined') {
                <@setQueryParam param=param></@setQueryParam>
        }
            <#else>
                <@setQueryParam param=param></@setQueryParam>
            </#if>
        </#list>

    </#if>
    return await fetch(url(<@url method=method></@url><#if method.queryParams?has_content && method.httpMethod == "GET">, params</#if>), {
        method: '${method.httpMethod?lower_case}',
        credentials: 'include',
        headers: prepareHeaders(thunkAPI.getState() as AppState<#if method.headerParams?has_content>, headers</#if>)
    }).then(res => map<#switch method.returnType.name><#case 'void'>Void<#break><#case 'string'>String<#break><#default>Json</#switch>Response(res));
}, ThunkOptions);
</#list>

/**
 * Autogenerated service client for the java class ${model.className}
 */
export function use${model.name}() {
    const dispatch = useAppDispatch();

    return useMemo(() => {
        return {
            <#list model.methods as method>
                ${method.name}: (${method.parameters?map(param -> param.name + ": " + param.type.name + param.optional?then(" | undefined", ""))?join(", ")}) => dispatch(${method.name}Thunk({${method.parameters?map(param -> param.name)?join(", ")}})).unwrap(),
            </#list>
        };
    }, [dispatch]);
}