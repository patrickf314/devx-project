package de.devx.project.client.react;

import de.devx.project.commons.client.typescript.data.TypeScriptPathModel;
import de.devx.project.commons.client.typescript.data.TypeScriptServiceMethodModel;
import de.devx.project.commons.client.typescript.data.TypeScriptServiceModel;
import de.devx.project.commons.client.typescript.data.TypeScriptTypeModel;
import de.devx.project.commons.test.io.TestSourceFileGenerator;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

class ReactClientGeneratorTest {

    private final TestSourceFileGenerator fileGenerator = new TestSourceFileGenerator();
    private final ReactClientGenerator generator = new ReactClientGenerator(fileGenerator, List.of(), null);

    @Test
    void testGenerateService() throws IOException {
        var model = new TypeScriptServiceModel();
        model.setName("TestServiceAPI");
        model.setClassName("de.test.typescript.client.type.TestServiceAPI");
        model.setBasePaths(List.of(new TypeScriptPathModel("/api/test", Collections.emptyList())));
        model.setMethods(List.of(
                method("test", "string")
        ));

        generator.generateService(model);

        var generatedMatcher = fileGenerator.getFileContent("de.test.typescript.client.type", "TestServiceAPI");
        assertThat(generatedMatcher.isPresent(), is(true));
        assertThat(generatedMatcher.get(), is("""
                /* eslint-disable @typescript-eslint/consistent-type-imports */
                // noinspection DuplicatedCode
                
                
                function baseUrl(state: AppState): string {                
                    return `${backendUrl(state)}/api/test`;
                }
                
                export const testThunk = createAsyncThunk('TestServiceAPI/test', async function(arg: undefined, thunkAPI): Promise<string> {
                
                    const headers = prepareHeaders(thunkAPI.getState());
                
                    return await fetch(url(`${baseUrl(thunkAPI.getState())}/test`), {
                        method: 'get',
                        credentials: 'include',
                        headers
                    }).then(res => mapStringResponse(res));
                }, ThunkOptions);
                
                /**
                 * Autogenerated service interface for the java class de.test.typescript.client.type.TestServiceAPI
                 */
                export interface TestServiceAPI {
                    test: () => Promise<string>;
                }
                
                /**
                 * Autogenerated service client for the java class de.test.typescript.client.type.TestServiceAPI
                 */
                export function useTestServiceAPI(): TestServiceAPI {
                    const dispatch = useAppDispatch();
                
                    return useMemo(() => {
                        return {                
                            test: () => dispatch(testThunk()).unwrap()
                        };
                    }, [dispatch]);
                }
                """));
    }

    private TypeScriptServiceMethodModel method(String name, String returnType) {
        var model = new TypeScriptServiceMethodModel();
        model.setName(name);
        model.setReturnType(new TypeScriptTypeModel(returnType, false));
        model.setHttpMethod("GET");
        model.setPath(new TypeScriptPathModel("/" + name, Collections.emptyList()));
        model.setReturnTypeWrapper("Promise");
        model.setReturnTypeMapper("mapReturnType");
        model.setFormData(false);
        return model;
    }
}